services:
  app:
    container_name: 'api_gateway_stakrotckii'
    build:
      context: app/
      dockerfile: Dockerfile
    volumes:
      - ..:/workspace:cached
    ports:
      - '28089:8080'
    command: sleep infinity
    cap_add:
      - SYS_PTRACE
    security_opt:
      - seccomp:unconfined
    environment:
      - PYTHONPATH=/workspace/src
  zookeeper:
    container_name: zookeeper
    image: bitnami/zookeeper:latest
    ports:
      - 2181:2181
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka:
    container_name: kafka
    image: bitnami/kafka:latest
    ports:
      - 9092:9092
      - 9093:9093
    environment:
       - KAFKA_BROKER_ID=1
       - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
       - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
       - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
       - ALLOW_PLAINTEXT_LISTENER=yes
       - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT
       - KAFKA_CFG_LISTENERS=CLIENT://:9092
       - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092
       - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
       - KAFKA_CREATE_TOPICS= "faces:3:1"
    depends_on:
       - zookeeper
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions.sh", "--bootstrap-server", "kafka:9092"]
      interval: 10s
      timeout: 5s
      retries: 5

  db:
    container_name: db
    image: inferno681/pgvector
    restart: always
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=postgres

  auth_service:
    container_name: auth_service
    build:
      context: ../auth_service
      dockerfile: Dockerfile_test
    restart: always
    volumes:
      - photo_storage:/app/photos
    ports:
      - 8001:8000
    depends_on:
      kafka:
        condition: service_healthy
      zookeeper:
        condition: service_started
    command: sh -c "alembic upgrade head && python src/app/main.py"

  transaction_service:
    container_name: transaction_service
    build:
      context: ../transaction_service
      dockerfile: Dockerfile_test
    volumes:
      - photo_storage:/app/photos
    restart: always
    ports:
      - 8002:8000
    depends_on:
      - auth_service
    command: sh -c "alembic upgrade head && python src/app/main.py"

  face_verification_service:
    container_name: face_verification_service
    build:
      context: ../face_verification_service
      dockerfile: Dockerfile_test
    restart: always
    ports:
      - 8003:8000
    depends_on:
      - auth_service
    command: sh -c "alembic upgrade head && python src/app/main.py"

volumes:
  photo_storage:
